import librosa
import os
import numpy as np
import csv
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
import tkinter as tk
from tkinter import filedialog
import pygame

# Function to extract audio features
def extract_features(song_path):
    # Load the audio file
    y, sr = librosa.load(song_path, duration=30)  # Adjust the duration as needed
    features = []
    
    # 1. Tempo
    tempo, _ = librosa.beat.beat_track(y=y, sr=sr, onset_envelope=None)
    features.append(tempo)
    
    # 2. Spectral centroid
    centroid = librosa.feature.spectral_centroid(y=y, sr=sr)
    features.extend(np.mean(centroid, axis=1))
    
    # 3. Zero-crossing rate
    zcr = librosa.feature.zero_crossing_rate(y)
    features.append(np.mean(zcr))
    
    # 4. MFCCs (13 coefficients)
    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
    features.extend(np.mean(mfcc, axis=1))
    
    # 5. Chroma feature
    chroma = librosa.feature.chroma_stft(y=y, sr=sr)
    features.extend(np.mean(chroma, axis=1))
    
    # 6. Spectral contrast
    contrast = librosa.feature.spectral_contrast(y=y, sr=sr)
    features.extend(np.mean(contrast, axis=1))
    
    # 7. Spectral rolloff
    rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)
    features.append(np.mean(rolloff))
    
    # 8. Spectral bandwidth
    bandwidth = librosa.feature.spectral_bandwidth(y=y, sr=sr)
    features.extend(np.mean(bandwidth, axis=1))
    
    # 9. Mel-scaled spectrogram
    mel_spec = librosa.feature.melspectrogram(y=y, sr=sr)
    features.extend(np.mean(mel_spec, axis=1))
    
    return features

# File paths and feature extraction
folder_path = "D:\\Main\\Sri\\Amrita ECE\\SEM 4\\19ECE284 - DSP Lab\\Project\\Data\\Tamil"
all_features = []
for subfolder in os.listdir(folder_path):
    subpath = os.path.join(folder_path, subfolder)
    for filename in os.listdir(subpath):
        if filename.endswith('.wav') or filename.endswith('.mp3'):
            file_path = os.path.join(subpath, filename)
            features = extract_features(file_path)
            all_features.append(features)

# Writing extracted features to a CSV file
with open('SongFeaturesTamil.csv', 'w', newline='') as features_file:
    writer = csv.writer(features_file)
    writer.writerows(all_features)

# Clustering using KMeans
num_clusters = 5  # Number of emotion clusters
X_train, X_test = train_test_split(all_features, test_size=0.2, random_state=42)
kmeans = KMeans(n_clusters=num_clusters)
kmeans.fit(X_train)

# Function to recommend similar songs
def recommend_similar_songs(song_path, cluster_labels, audio_files):
    new_features = extract_features(song_path)
    new_cluster_label = kmeans.predict([new_features])[0]
    similar_song_indices = [i for i, label in enumerate(cluster_labels) if label == new_cluster_label]
    similar_songs = [audio_files[i] for i in similar_song_indices]
    return similar_songs

# GUI setup using tkinter for music recommendation
root = tk.Tk()

class MusicPlayer:
    def __init__(self, master, song_list):
        self.master = master
        self.master.title("Music Player")
        self.master.geometry("800x400")
        self.song_list = song_list
        self.create_widgets()

    def browse_get_similar(self):
        file_path = filedialog.askopenfilename(filetypes=[("Audio Files", ".wav"), ("Audio Files", ".mp3")])
        if file_path:
            similar_songs = recommend_similar_songs(file_path, kmeans.labels_, audio_files)
            self.listbox_songs.delete(0, tk.END)
            for song_name in similar_songs:
                self.listbox_songs.insert(tk.END, song_name)

    def create_widgets(self):
        self.heading_label = tk.Label(self.master, text="Music Recommendation System", font=("Arial", 20, "bold"))
        self.heading_label.pack()
        self.browse_button = tk.Button(self.master, text="Browse", command=self.browse_get_similar)
        self.browse_button.pack(pady=20)
        self.label_song = tk.Label(self.master, text="Similar Songs:")
        self.label_song.pack()
        self.listbox_songs = tk.Listbox(self.master, width=100)
        self.listbox_songs.pack()
        self.button_play = tk.Button(self.master, text="Play", command=self.play_song)
        self.button_play.pack()
        self.button_pause = tk.Button(self.master, text="Pause", command=self.pause_song)
        self.button_pause.pack()

    def play_song(self):
        selected_index = self.listbox_songs.curselection()
        song_path = self.listbox_songs.get(selected_index[0])
        if self.song_list:
            pygame.mixer.init()
            pygame.mixer.music.load(song_path)
            pygame.mixer.music.play()

    def pause_song(self):
        pygame.mixer.music.pause()

audio_files = []  # You need to populate this list with your audio file paths
folder_path = 'D:\\Main\\Sri\\Amrita ECE\\SEM 4\\19ECE284 - DSP Lab\\Project\\Data\\genres'
for subfolder in os.listdir(folder_path):
    subpath = os.path.join(folder_path, subfolder)
    for filename in os.listdir(subpath):
        if filename.endswith('.wav') or filename.endswith('.mp3'):
            file_path = os.path.join(subpath, filename)
            audio_files.append(file_path)

# Initialize GUI and start the main event loop
root.title("Song Recommendation System")
music_player = MusicPlayer(root, audio_files)
root.mainloop()

# Perform PCA for visualization (optional)
pca = PCA(n_components=2)
X_pca = pca.fit_transform(all_features)
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=kmeans.labels_)
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA')
plt.savefig('emotions.png')
plt.show()
